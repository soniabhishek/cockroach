package feed_line

import (
	"gitlab.com/playment-main/angel/app/models"
	"gitlab.com/playment-main/angel/app/models/uuid"
	"sync"
)

// ShortHand for channel of FLUs i.e. FeedLine
type Fl chan FLU

// Get new FeedLine channel with unlimited size
func New() Fl {

	feedLine := make(chan FLU, 1000)
	return feedLine
}

func NewBig() Fl {
	feedLine := make(chan FLU, 10000)
	return feedLine
}

// Get new FeedLine channel with fixed size
func NewFixedSize(size int) Fl {
	return make(chan FLU, size)
}

//--------------------------------------------------------------------------------//

type Bf struct {
	mtx    sync.RWMutex
	fluMap map[uuid.UUID]FLU
}

func NewBuffer() Bf {
	return Bf{fluMap: make(map[uuid.UUID]FLU)}
}

// RLock is read lock i.e. either multiple reads
// or single write can happen at a time
func (b *Bf) Get(id uuid.UUID) (FLU, bool) {
	b.mtx.RLock()
	defer b.mtx.RUnlock()

	flu, ok := b.fluMap[id]
	return flu, ok
}

// Write lock part of the read write lock
func (b *Bf) Save(flu FLU) {
	b.mtx.Lock()
	defer b.mtx.Unlock()

	b.fluMap[flu.ID] = flu
}

func (b *Bf) GetAll() map[uuid.UUID]FLU {
	b.mtx.RLock()
	defer b.mtx.RUnlock()

	return b.fluMap
}

//--------------------------------------------------------------------------------//

type FLU struct {
	models.FeedLineUnit

	// Change the name
	// Used here for collecting & passing around information about
	// previous steps of the flu processing
	Trip []Builder
}

//--------------------------------------------------------------------------------//

type Builder interface {
	// Returns the step identifier
	Step() uint

	// Returns the step pending
	Pending() bool

	// Returns the step success
	Success() bool

	// Returns the input data
	InData() interface{}

	// Returns the data generated by that step
	OutData() interface{}
}
